import { takeLatest, call, put } from 'redux-saga/effects';
import { shareImage } from '../actions/routines';
import { uploadImage } from '../api/apis';
/* WORKER SAGA */
function* shareImageSaga(action) {
    try {

        // string generated by canvas.toDataURL()
        let form = new FormData();
        yield form.append('image', action.payload.toBase64Image());
        yield form.append('type', 'base64');
        let uploadResponse = yield call(uploadImage, form);
        console.log('uploaded', uploadResponse);
        yield put(shareImage.success());
    } catch (error) {
        console.log('error', error)
        yield put(shareImage.failure(error));
    }
}

/* WATCHER SAGA */
export default function* watchShareImage() {
    // run fetchDataFromServer on every trigger action
    yield takeLatest(shareImage.TRIGGER, shareImageSaga);
}
